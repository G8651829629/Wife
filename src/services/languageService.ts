import { Language } from '../types/ai';

export class LanguageService {
  private languages: Language[] = [
    { code: 'en', name: 'English', nativeName: 'English', flag: 'ЁЯЗ║ЁЯЗ╕' },
    { code: 'hi', name: 'Hindi', nativeName: 'рд╣рд┐рдиреНрджреА', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'bho', name: 'Bhojpuri', nativeName: 'рднреЛрдЬрдкреБрд░реА', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'fr', name: 'French', nativeName: 'Fran├зais', flag: 'ЁЯЗлЁЯЗ╖' },
    { code: 'ta', name: 'Tamil', nativeName: 'родрооро┐ро┤рпН', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'ur', name: 'Urdu', nativeName: '╪з╪▒╪п┘И', flag: 'ЁЯЗ╡ЁЯЗ░', rtl: true },
    { code: 'ar', name: 'Arabic', nativeName: '╪з┘Д╪╣╪▒╪и┘К╪й', flag: 'ЁЯЗ╕ЁЯЗж', rtl: true },
    { code: 'bn', name: 'Bengali', nativeName: 'ржмрж╛ржВрж▓рж╛', flag: 'ЁЯЗзЁЯЗй' },
    { code: 'es', name: 'Spanish', nativeName: 'Espa├▒ol', flag: 'ЁЯЗкЁЯЗ╕' },
    { code: 'de', name: 'German', nativeName: 'Deutsch', flag: 'ЁЯЗйЁЯЗк' },
    { code: 'id', name: 'Indonesian', nativeName: 'Bahasa Indonesia', flag: 'ЁЯЗоЁЯЗй' },
    { code: 'ja', name: 'Japanese', nativeName: 'цЧецЬмшкЮ', flag: 'ЁЯЗпЁЯЗ╡' }
  ];

  private greetings: { [key: string]: string[] } = {
    en: ['hello', 'hi', 'hey', 'good morning', 'good evening'],
    hi: ['рдирдорд╕реНрддреЗ', 'рд╣реИрд▓реЛ', 'рд╣рд╛рдп', 'рд╕реБрдкреНрд░рднрд╛рдд', 'рд╢реБрдн рд╕рдВрдзреНрдпрд╛'],
    bho: ['рдкреНрд░рдгрд╛рдо', 'рдирдорд╕реНрдХрд╛рд░', 'рд╣реИрд▓реЛ'],
    fr: ['bonjour', 'salut', 'bonsoir', 'hello'],
    ta: ['ро╡рогроХрпНроХроорпН', 'ро╣ро▓рпЛ', 'ро╡ро╛роЩрпНроХ'],
    ur: ['╪з┘Д╪│┘Д╪з┘Е ╪╣┘Д█М┌й┘Е', '█Б█М┘Д┘И', '╪в╪п╪з╪и'],
    ar: ['╪з┘Д╪│┘Д╪з┘Е ╪╣┘Д┘К┘Г┘Е', '┘Е╪▒╪н╪и╪з', '╪г┘З┘Д╪з'],
    bn: ['ржиржорж╕рзНржХрж╛рж░', 'рж╣рзНржпрж╛рж▓рзЛ', 'рж╕рж╛рж▓рж╛ржо'],
    es: ['hola', 'buenos d├нas', 'buenas tardes'],
    de: ['hallo', 'guten tag', 'guten morgen'],
    id: ['halo', 'selamat pagi', 'selamat sore'],
    ja: ['уБУуВУуБлуБбуБп', 'уБКуБпуВИуБЖ', 'уБУуВУуБ░уВУуБп']
  };

  getLanguages(): Language[] {
    return this.languages;
  }

  detectLanguage(text: string): string {
    const lowerText = text.toLowerCase();
    
    // Check for specific language patterns
    for (const [langCode, greetingList] of Object.entries(this.greetings)) {
      for (const greeting of greetingList) {
        if (lowerText.includes(greeting.toLowerCase())) {
          return langCode;
        }
      }
    }

    // Unicode range detection for scripts
    if (/[\u0900-\u097F]/.test(text)) return 'hi'; // Devanagari (Hindi/Bhojpuri)
    if (/[\u0B80-\u0BFF]/.test(text)) return 'ta'; // Tamil
    if (/[\u0600-\u06FF]/.test(text)) return 'ar'; // Arabic/Urdu
    if (/[\u0980-\u09FF]/.test(text)) return 'bn'; // Bengali
    if (/[\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]/.test(text)) return 'ja'; // Japanese

    // Default to English
    return 'en';
  }

  getLanguageName(code: string): string {
    const lang = this.languages.find(l => l.code === code);
    return lang ? lang.name : 'English';
  }

  getLanguagePrompt(code: string): string {
    const prompts: { [key: string]: string } = {
      en: 'Respond in English',
      hi: 'Respond in Hindi (рд╣рд┐рдиреНрджреА рдореЗрдВ рдЬрд╡рд╛рдм рджреЗрдВ)',
      bho: 'Respond in Bhojpuri (рднреЛрдЬрдкреБрд░реА рдореЗрдВ рдЬрд╡рд╛рдм рджреЗрдВ)',
      fr: 'R├йpondez en fran├зais',
      ta: 'родрооро┐ро┤ро┐ро▓рпН рокродро┐ро▓ро│ро┐роХрпНроХро╡рпБроорпН',
      ur: '╪з╪▒╪п┘И ┘Е█М┌║ ╪м┘И╪з╪и ╪п█М┌║',
      ar: '╪г╪м╪и ╪и╪з┘Д┘Д╪║╪й ╪з┘Д╪╣╪▒╪и┘К╪й',
      bn: 'ржмрж╛ржВрж▓рж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрж┐ржи',
      es: 'Responde en espa├▒ol',
      de: 'Antworten Sie auf Deutsch',
      id: 'Jawab dalam bahasa Indonesia',
      ja: 'цЧецЬмшкЮуБзчнФуБИуБжуБПуБауБХуБД'
    };
    
    return prompts[code] || prompts.en;
  }
}